<<<<<<< HEAD
# ===============================================
# Configurações do Servidor
# ===============================================
server.port=8080

# ===============================================
# Configurações do Banco de Dados PostgreSQL
# ===============================================
# URL de conexão com o banco de dados PostgreSQL.
# O nome do banco de dados deve ser 'Marketing' para o novo projeto.
spring.datasource.url=jdbc:postgresql://localhost:5432/Marketing
# Nome de usuário para o banco de dados.
=======
spring.datasource.url=jdbc:postgresql://localhost/postgres
>>>>>>> 30ed11cefc0f76bf6ecf0fbacc65ddc3d9c9d933
spring.datasource.username=postgres
# Senha do usuário do banco de dados.
spring.datasource.password=Sen@c2023
# Classe do driver JDBC para PostgreSQL.
spring.datasource.driver-class-name=org.postgresql.Driver

# Configurações do Hibernate
# 'update' permite que o Hibernate crie ou atualize o schema do banco de dados automaticamente.
spring.jpa.hibernate.ddl-auto=update
# Exibe as consultas SQL no console. Útil para depuração.
spring.jpa.show-sql=true
# Formata as consultas SQL exibidas, tornando-as mais legíveis.
spring.jpa.properties.hibernate.format_sql=true
# Dialeto do Hibernate para PostgreSQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# ===============================================
# Configurações de Segurança JWT
# ===============================================
# Chave secreta para assinar e verificar tokens JWT.
# **IMPORTANTE**: Em produção, esta chave deve ser armazenada em um local seguro (cofre de segredos ou variável de ambiente).
jwt.secret=SUA_CHAVE_SECRETA_MUITO_LONGA_E_COMPLEXA_AQUI_PARA_SEGURANCA_NAO_USE_ISSO_EM_PRODUCAO_SEM_VARIAVEIS_DE_AMBIENTE_OU_COFRE
# Tempo de expiração do token JWT em milissegundos.
# 86400000 ms = 24 horas.
jwt.expiration=86400000